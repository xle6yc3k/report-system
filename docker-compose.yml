version: "3.9"

services:
  reverse-proxy:
    image: traefik:v3.1
    container_name: traefik
    restart: always
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/dynamic.yml:/etc/traefik/dynamic.yml:ro
      - ./certs:/certs:ro
  db:
    image: postgres:16
    container_name: report_system-db
    restart: always

    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345678
      POSTGRES_DB: defects_db

    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d

    ports:
      - "5432:5432"

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d defects_db"]
      interval: 10s
      timeout: 5s
      retries: 5

    networks:
      - default

  frontend:
    build:
      context: ./DefectsManagement.ClientV2
      dockerfile: Dockerfile
      args:
        - VITE_API_BASE_URL=https://api.localhost/api
    expose:
      - "80"
    labels:
      - traefik.enable=true
      - traefik.http.routers.front.rule=Host(`frontend.localhost`)
      - traefik.http.routers.front.entrypoints=websecure
      - traefik.http.routers.front.tls=true            # <-- ВАЖНО
      - traefik.http.services.front.loadbalancer.server.port=80

  api:
    build:
      context: ./DefectsManagement.Api
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_URLS=http://+:8080
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_FORWARDEDHEADERS_ENABLED=true
      - ConnectionStrings__DefaultConnection=Host=db;Port=5432;Database=defects;Username=postgres;Password=12345678
    expose:
      - "8080"
    depends_on:
      - db
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=Host(`api.localhost`)
      - traefik.http.routers.api.entrypoints=websecure
      - traefik.http.routers.api.tls=true              # <-- ВАЖНО
      - traefik.http.services.api.loadbalancer.server.port=8080

volumes:
  pgdata:
