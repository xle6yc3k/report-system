// <auto-generated />
using System;
using DefectsManagement.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DefectsManagement.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251007193040_AddProjectKey")]
    partial class AddProjectKey
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DefectsManagement.Api.Models.Defect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssignedId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<DateOnly?>("DueDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssignedId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DueDate");

                    b.HasIndex("Priority");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Status");

                    b.HasIndex("ProjectId", "Status", "Priority");

                    b.ToTable("Defects");
                });

            modelBuilder.Entity("DefectsManagement.Api.Models.DefectAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid>("DefectId")
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("StorageKey")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UploadedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UploadedById");

                    b.HasIndex("DefectId", "UploadedAt");

                    b.ToTable("DefectAttachments");
                });

            modelBuilder.Entity("DefectsManagement.Api.Models.DefectComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DefectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("boolean");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("DefectId", "CreatedAt");

                    b.ToTable("DefectComments");
                });

            modelBuilder.Entity("DefectsManagement.Api.Models.DefectHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ActorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DefectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("DefectId", "OccurredAt");

                    b.ToTable("DefectHistories");
                });

            modelBuilder.Entity("DefectsManagement.Api.Models.DefectTag", b =>
                {
                    b.Property<Guid>("DefectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Tag")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("DefectId", "Tag");

                    b.ToTable("DefectTags");
                });

            modelBuilder.Entity("DefectsManagement.Api.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("DefectsManagement.Api.Models.ProjectMember", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.HasIndex("ProjectId", "UserId")
                        .IsUnique();

                    b.ToTable("ProjectMembers");
                });

            modelBuilder.Entity("DefectsManagement.Api.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DefectsManagement.Api.Models.Defect", b =>
                {
                    b.HasOne("DefectsManagement.Api.Models.User", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DefectsManagement.Api.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DefectsManagement.Api.Models.Project", "Project")
                        .WithMany("Defects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedTo");

                    b.Navigation("CreatedBy");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DefectsManagement.Api.Models.DefectAttachment", b =>
                {
                    b.HasOne("DefectsManagement.Api.Models.Defect", "Defect")
                        .WithMany("Attachments")
                        .HasForeignKey("DefectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DefectsManagement.Api.Models.User", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Defect");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("DefectsManagement.Api.Models.DefectComment", b =>
                {
                    b.HasOne("DefectsManagement.Api.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DefectsManagement.Api.Models.Defect", "Defect")
                        .WithMany("Comments")
                        .HasForeignKey("DefectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Defect");
                });

            modelBuilder.Entity("DefectsManagement.Api.Models.DefectHistory", b =>
                {
                    b.HasOne("DefectsManagement.Api.Models.User", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DefectsManagement.Api.Models.Defect", "Defect")
                        .WithMany("History")
                        .HasForeignKey("DefectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Defect");
                });

            modelBuilder.Entity("DefectsManagement.Api.Models.DefectTag", b =>
                {
                    b.HasOne("DefectsManagement.Api.Models.Defect", "Defect")
                        .WithMany("Tags")
                        .HasForeignKey("DefectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Defect");
                });

            modelBuilder.Entity("DefectsManagement.Api.Models.ProjectMember", b =>
                {
                    b.HasOne("DefectsManagement.Api.Models.Project", "Project")
                        .WithMany("Members")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DefectsManagement.Api.Models.User", "User")
                        .WithMany("ProjectMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DefectsManagement.Api.Models.Defect", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Comments");

                    b.Navigation("History");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("DefectsManagement.Api.Models.Project", b =>
                {
                    b.Navigation("Defects");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("DefectsManagement.Api.Models.User", b =>
                {
                    b.Navigation("ProjectMemberships");
                });
#pragma warning restore 612, 618
        }
    }
}
